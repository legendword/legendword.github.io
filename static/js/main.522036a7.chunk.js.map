{"version":3,"sources":["components/ALink.js","components/MainIntro.js","components/RepoProps.js","components/MainContent.js","components/NavList.js","App.js","serviceWorker.js","index.js"],"names":["ALink","props","href","target","rel","MainIntro","style","marginTop","paragraphStyle","className","links","map","link","ind","Fragment","key","name","Component","textIndent","RepoProps","allProps","filter","i","data","t","alias","split","x","id","statusColor","StartDate","EndDate","Status","Contemporary","Stable","Deprecated","Outdated","MainContent","this","path","routerPath","url","desc","exact","to","NavList","activeClassName","App","React","Version","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.522036a7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function ALink(props) {\n    return (\n        <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\">{props.href}</a>\n    )\n}\n","import React, { Component } from 'react'\nimport Alink from './ALink'\n\nexport class MainIntro extends Component {\n    render() {\n        return (\n            <div>\n                <h2 style={{ marginTop: \"20px\" }}>Legendword</h2>\n                <div>\n                </div>\n                <br />\n                <h5>A Somewhat Awkward Introduction</h5>\n                <p style={paragraphStyle}>\n                    Hello there! I have been doing web programming as a hobby for \n                    about five years, producing numerous small or large projects \n                    of my own. While most of them are results of my learning process, \n                    there are some projects that I was very excited about and did \n                    really put my effort in.\n                </p>\n                <p style={paragraphStyle}>\n                    As a means of sharing the excitement, I started to make my projects \n                    from the past open source. You can always have a look at them and \n                    perhaps submit an issue/pull request. This Github Pages site is \n                    created solely for the purpose of listing and introducing my \n                    repositories to you.\n                </p>\n                <p style={paragraphStyle}>\n                    You can find information on a specific repository. For some of \n                    them, you might even find a story or the thought process of the \n                    project.\n                </p>\n                <hr />\n                <h5>Some Links</h5>\n                <div className=\"container\">\n                    <dl className=\"row\">\n                        {\n                            links.map((link,ind) => (\n                                <React.Fragment key={ind}>\n                                    <dt className=\"col-sm-3\">{link.name}</dt>\n                                    <dd className=\"col-sm-9\"><Alink href={link.href} /></dd>\n                                </React.Fragment>\n                            ))\n                        }\n                    </dl>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst paragraphStyle = {\n    textIndent: \"30px\"\n}\n\nconst links = [\n    {\n        name: \"GitHub\",\n        href: \"https://github.com/legendword\"\n    },\n    {\n        name: \"Website\",\n        href: \"http://legendword.com\"\n    }\n]\n\nexport default MainIntro\n","import React, { Component } from 'react'\n\nexport class RepoProps extends Component {\n    render() {\n        return (\n            <dl className=\"row repo-props\">\n                {\n                    allProps.filter((i) => {\n                        return !(this.props.data[i]==null)\n                    }).map((t,ind) => {\n                        if (t===\"Status\") {\n                            return (\n                                <React.Fragment key={ind}>\n                                    <dt className=\"col-sm-3\">{alias[t]?alias[t]:t}</dt>\n                                    <dd className=\"col-sm-9 status\">\n                                        {\n                                            this.props.data[t].split(\", \").map((x,id) => (\n                                                <span className={`text-${statusColor[x]}`} key={id}>{x}</span>\n                                            ))\n                                        }\n                                    </dd>\n                                </React.Fragment>\n                            )\n                        }\n                        else {\n                            return (\n                                <React.Fragment key={ind}>\n                                    <dt className=\"col-sm-3\">{alias[t]?alias[t]:t}</dt>\n                                    <dd className=\"col-sm-9\">{this.props.data[t]}</dd>\n                                </React.Fragment>\n                            )\n                        }\n                    })\n                }\n            </dl>\n        )\n    }\n}\n\nconst allProps = [\"StartDate\", \"Version\", \"EndDate\", \"Status\"]\n\nconst alias = {\n    StartDate: \"Date of First Commit\",\n    EndDate: \"Date of Final Commit\",\n    Status: \"Project Status\"\n}\n\nconst statusColor = {\n    Contemporary: \"primary\",\n    Stable: \"success\",\n    Deprecated: \"warning\",\n    Outdated: \"warning\",\n    \"Dev Beta\": \"secondary\",\n    \"Public Beta\": \"info\",\n    \"Open Beta\": \"info\"\n}\n\nexport default RepoProps\n","import React, { Component } from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom'\nimport MainIntro from './MainIntro'\nimport RepoProps from './RepoProps'\nimport ALink from './ALink'\n\nexport class MainContent extends Component {\n    render() {\n        return (\n            <Switch>\n                { this.props.data.map((t,id) => (\n                    <Route path={t.routerPath ? t.routerPath : `/${t.name}`} key={id}>\n                        <h3 style={{ marginTop: \"20px\" }}>\n                            {t.name}\n                        </h3>\n                        <p>\n                            <ALink href={t.url} />\n                        </p>\n                        <p>{t.desc}</p>\n                        <RepoProps data={t.data} />\n\n                    </Route>\n                )) }\n                <Route path=\"/intro\">\n                    <MainIntro />\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to=\"/intro\"></Redirect>\n                </Route>\n            </Switch>\n        )\n    }\n}\n\nexport default MainContent\n","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom';\n\nexport class NavList extends Component {\n    render() {\n        return (\n            <div>\n                <h5>Repositories</h5>\n                <div className=\"list-group\">\n                    {\n                        this.props.data.map((t,id) => (\n                            <NavLink \n                                to={t.routerPath ? t.routerPath : `/${t.name}`} \n                                className=\"list-group-item list-group-item-action\" \n                                activeClassName=\"active\"\n                                key={id}\n                            >\n                                {t.name}\n                            </NavLink>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default NavList\n","import React from 'react';\nimport MainContent from './components/MainContent';\nimport NavList from './components/NavList';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { HashRouter as Router, NavLink } from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <div className=\"container\">\n            <h1 style={{marginTop:\"30px\"}}>Legendword Open Source</h1>\n            <p className=\"lead\">A comprehensive list of my open source projects.</p>\n            <hr />\n            <div className=\"row\">\n              <div className=\"col-sm-3\">\n                <NavLink \n                    to=\"/intro\" \n                    className=\"list-group-item list-group-item-action\" \n                    activeClassName=\"active\"\n                >\n                    Introduction\n                </NavLink>\n                <hr />\n                <NavList data={data} />\n              </div>\n              <div className=\"col-sm-9\">\n                <MainContent data={data} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst data = [\n  {\n    name: \"legendword.github.io\",\n    url: \"https://github.com/legendword/legendword.github.io\",\n    desc: \"This project, obviously.\",\n    data: {\n      StartDate: \"Sep. 15, 2019\",\n      Version: \"1.0.191129\",\n      Status: \"Contemporary, Stable\"\n    }\n  },\n  {\n    name: \"snake-game\",\n    url: \"https://github.com/legendword/snake-game\",\n    desc: \"Singleplayer snake game.\",\n    data: {\n      StartDate: \"Oct. 29, 2019\",\n      Version: \"1.0.191110\",\n      Status: \"Contemporary, Stable\"\n    }\n  },\n  {\n    name: \"Better-Google-Translate\",\n    url: \"https://github.com/legendword/Better-Google-Translate\",\n    desc: \"A Tampermonkey script to enhance the Google Translate web experience.\",\n    data: {\n      StartDate: \"Nov. 27, 2019\",\n      Version: \"0.3\",\n      Status: \"Contemporary, Open Beta\"\n    }\n  },\n  {\n    name: \"LVocab\",\n    url: \"https://github.com/legendword/LVocab\",\n    desc: \"An online vocabulary learning tool that helps with memorizing new words as a language learner.\",\n    data: {\n      StartDate: \"Jan. 24, 2019\",\n      Version: \"0.1.01\",\n      Status: \"Open Beta\"\n    }\n  }\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}