{"version":3,"sources":["components/MainContent.js","components/NavList.js","App.js","serviceWorker.js","index.js"],"names":["MainContent","this","props","data","map","t","id","path","routerPath","name","desc","exact","to","Component","NavList","className","activeClassName","App","style","marginTop","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAuBeA,EApBf,iLAEQ,OACI,kBAAC,IAAD,KACMC,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAEC,GAAH,OAClB,kBAAC,IAAD,CAAOC,KAAMF,EAAEG,WAAaH,EAAEG,WAAjB,WAAkCH,EAAEI,OAC7C,2BAAIJ,EAAEK,UAGd,kBAAC,IAAD,CAAOH,KAAK,UACR,kDAEJ,kBAAC,IAAD,CAAOI,OAAK,EAACJ,KAAK,KACd,kBAAC,IAAD,CAAUK,GAAG,iBAbjC,GAAiCC,a,QCoBlBC,EApBf,iLAEQ,OACI,yBAAKC,UAAU,cAEPd,KAAKC,MAAMC,KAAKC,KAAI,SAACC,EAAEC,GAAH,OAChB,kBAAC,IAAD,CACIM,GAAIP,EAAEG,WAAaH,EAAEG,WAAjB,WAAkCH,EAAEI,MACxCM,UAAU,yCACVC,gBAAgB,UAEfX,EAAEI,cAX/B,GAA6BI,aCIvBI,G,6LAEF,OACE,kBAAC,IAAD,KACE,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,aACb,wBAAIG,MAAO,CAACC,UAAU,SAAtB,0BACA,uBAAGJ,UAAU,QAAb,oDACA,6BACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,CACIH,GAAG,SACHG,UAAU,yCACVC,gBAAgB,UAHpB,gBAOA,6BACA,kBAAC,EAAD,CAASb,KAAMA,KAEjB,yBAAKY,UAAU,YACb,kBAAC,EAAD,CAAaZ,KAAMA,a,GAtBjBiB,IAAMP,YAgClBV,EAAO,CACX,CACEG,GAAI,EACJG,KAAM,uBACNC,KAAM,4BAER,CACEJ,GAAI,EACJG,KAAM,aACNC,KAAM,6BAIKO,ICxCKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0afe148b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nexport class MainContent extends Component {\n    render() {\n        return (\n            <Switch>\n                { this.props.data.map((t,id) => (\n                    <Route path={t.routerPath ? t.routerPath : `/${t.name}`}>\n                        <p>{t.desc}</p>\n                    </Route>\n                )) }\n                <Route path=\"/intro\">\n                    <h3>Work in progress.</h3>\n                </Route>\n                <Route exact path=\"/\">\n                    <Redirect to=\"/intro\"></Redirect>\n                </Route>\n            </Switch>\n        )\n    }\n}\n\nexport default MainContent\n","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom';\n\nexport class NavList extends Component {\n    render() {\n        return (\n            <div className=\"list-group\">\n                {\n                    this.props.data.map((t,id) => (\n                        <NavLink \n                            to={t.routerPath ? t.routerPath : `/${t.name}`} \n                            className=\"list-group-item list-group-item-action\" \n                            activeClassName=\"active\"\n                        >\n                            {t.name}\n                        </NavLink>\n                    ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default NavList\n","import React from 'react';\nimport MainContent from './components/MainContent';\nimport NavList from './components/NavList';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, NavLink } from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <div className=\"container\">\n            <h1 style={{marginTop:\"30px\"}}>Legendword Open Source</h1>\n            <p className=\"lead\">A comprehensive list of my open source projects.</p>\n            <hr />\n            <div className=\"row\">\n              <div className=\"col-sm-3\">\n                <NavLink \n                    to=\"/intro\" \n                    className=\"list-group-item list-group-item-action\" \n                    activeClassName=\"active\"\n                >\n                    Introduction\n                </NavLink>\n                <hr />\n                <NavList data={data} />\n              </div>\n              <div className=\"col-sm-9\">\n                <MainContent data={data} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst data = [\n  {\n    id: 1,\n    name: \"legendword.github.io\",\n    desc: \"This project, obviously.\"\n  },\n  {\n    id: 2,\n    name: \"snake-game\",\n    desc: \"Singleplayer snake game.\"\n  }\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}